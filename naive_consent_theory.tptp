%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Naive consent theory-based machine ethics
%
%
% This file contains a simplistic/naive machine ethics system based on consent theory concepts,
% and implemented in the TPTP automated theorem prover interchange dialect.
%
% This is intended as an introduction to the basic concept and proof system, and not as a complete or
% useful system.
%
% A plain language summary of this system:
%
% It is ethical to:
%  1. ask for consent for an action, get consent for that action, and then:
%     a. do that action
%     b. NOT do that action.
%  2. ask for consent, NOT get consent for that action, and then NOT do that action.
%  3. do or NOT do an action to yourself.
%
% As you can see, this is a very simple model of ethical behaviour, yet consent
% by itself is enough to decide the difference between medicine, assault,
% euthanasia, suicide, and murder.
%
%
% Included is a set of test cases to demonstrate these results, and act as a
% basic check on this system for consistency.
%
% (These are not intended to be conclusive/exhaustive tests, and your personal
%  morals and/or ethics may differ from what is consistent with this system.)
%
%
% NOTE: This file is designed to be run through the (supplied) Python-based test runner called
%
%         'run_as_tptp_test_suite.py'
%
%       which requires the E prover:
%
%         http://www4.informatik.tu-muenchen.de/~schulz/E/E.html
%
%       to be installed at /home/E, and will not work as intended if run as-is in a TPTP-compatible
%       theorem prover outside the test runner.
%
%       The tests in this file may be run using the following command line:
%
%         python run_as_tptp_test_suite.py naive_consent_theory.tptp
%
%       Individual tests may be run using the following command line:
%
%         python run_as_tptp_test_suite.py naive_consent_theory.tptp asking_and_getting_consent_is_ethical
%
%
%       Expected output from a full test suite run:
%
%       $ ./run_as_tptp_test_suite.py naive_consent_theory.tptp
%       Test results:
%
%       ..............................
%
%
%       Test run complete.
%
%
%       Alternatively, for a quicker start/without installing E, you may wish to slice up this file manually,
%       adding each separate goal/conjecture after the initial modelling section, and supplying that to the
%       System on TPTP prover web interface:
%
%         http://www.cs.miami.edu/~tptp/cgi-bin/SystemOnTPTP
%
%       as this requires no scripting use or prover installation to use.
%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Modelling of consent theory.
%
% This is shared with all tests.
%
%%%

% Define ethical actions.
fof(ethical_action_definition, axiom,
    ! [A, B, X]:
    (
     ethical(A, B, X) <=>
     (
      (
       ask_for_consent(A, B, X) &             % It is ethical to ask for consent for an action,
       consents(B, A, X) &                    % get consent for that action,
       (
        do(A, B, X) |                         % and then either do,
        (~ do(A, B, X))                       % or do not do that action.
       )
      ) |
      (
       ask_for_consent(A, B, X) &             % It is ethical to ask for consent for an action,
       (~ consents(B, A, X)) &                % not get consent for that action,
       (~ do(A, B, X))                        % and then not do that action.
      ) |
      (
       (
        do(A, B, X) |                         % It is ethical to do (or not do) an action
        (~ do(A, B, X))                       % to yourself.
       ) &
       (A = B)
      )
     )
    )
).

%%%%%%%%%%%%%%
% Test suite.
%
% Contains known ethical/unethical behaviours, and the decisions the modelling above should make about these
% behaviours.

% Test runner: begin tests.
%
% (This is a directive to the test runner to slice up the following 'Test case:' delineated
%  sections, and runs them separately through a TPTP-compatible prover, storing the resulting output in a
%  results/directory, and collating the results in a JUnit/phpUnit-style display.)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% General consent theory principles.
%
% The names used in these tests (e.g. alex, bo) are intended to be gender-neutral and/or role-appropriate.
%%%

% Test case: asking_and_getting_consent_is_ethical
%
% Asking for consent and getting it is ethical for the person asking.

fof(asking_and_getting_consent_is_ethical, conjecture,
    (
     (
      ask_for_consent(alex, bo, action) &
      consents(bo, alex, action) &
      alex != bo
     ) =>
     ethical(alex, bo, action)
    )
).

% Negated test case: asking_and_getting_consent_is_not_unethical
%
% Asking for consent and getting it should not be proven to be unethical for the person asking.

fof(asking_and_getting_consent_is_not_unethical, conjecture,
    (
     (
      ask_for_consent(alex, bo, action) &
      consents(bo, alex, action) &
      alex != bo
     ) =>
     (~ ethical(alex, bo, action))
    )
).

% Test case: asking_and_not_getting_consent_is_ethical
%
% Asking for consent and not getting it is ethical for the person asking if they then don't act.

fof(asking_and_not_getting_consent_is_ethical, conjecture,
    (
     (
      ask_for_consent(alex, bo, action) &
      (~ consents(bo, alex, action)) &
      (~ do(alex, bo, action)) &
      alex != bo
     ) =>
     ethical(alex, bo, action)
    )
).

% Negated test case: asking_and_not_getting_consent_is_not_unethical
%
% Asking for consent and not getting it should not be proven unethical for the person asking if they then don't act,

fof(asking_and_not_getting_consent_is_not_unethical, conjecture,
    (
     (
      ask_for_consent(alex, bo, action) &
      (~ consents(bo, alex, action)) &
      (~ do(alex, bo, action)) &
      alex != bo
     ) =>
     (~ ethical(alex, bo, action))
    )
).

% Test case: ignoring_consent_negative_responses_is_unethical
%
% Ignoring consent-negative responses is unethical.

fof(ignoring_consent_negative_responses_is_unethical, conjecture,
    (
     (
      ask_for_consent(alex, bo, action) &
      (~ consents(bo, alex, action)) &
      do(alex, bo, action) &
      alex != bo
     ) =>
     (~ ethical(alex, bo, action))
    )
).

% Negated test case: ignoring_consent_negative_responses_is_not_ethical
%
% Ignoring consent-negative responses should not be proven to be ethical.

fof(ignoring_consent_negative_responses_is_not_ethical, conjecture,
    (
     (
      ask_for_consent(alex, bo, action) &
      (~ consents(bo, alex, action)) &
      do(alex, bo, action) &
      alex != bo
     ) =>
     ethical(alex, bo, action)
    )
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Murder versus euthanasia vs suicide.
%%%

% Test case: killing_without_consent_is_unethical
%
% Murder: killing without consent is unethical.

fof(killing_without_consent_is_unethical, conjecture,
    (
     (
      (~ ask_for_consent(murderer, victim, kill)) &
      do(murderer, victim, kill) &
      murderer != victim
     ) =>
     (~ ethical(murderer, victim, kill))
    )
).

% Negated test case: killing_without_consent_is_not_ethical
%
% Murder: killing without consent should not be prove to be ethical.

fof(killing_without_consent_is_not_ethical, conjecture,
    (
     (
      (~ ask_for_consent(murderer, victim, kill)) &
      do(murderer, victim, kill) &
      murderer != victim
     ) =>
     ethical(murderer, victim, kill)
    )
).

% Test case: killing_with_explicit_non_consent_is_unethical
%
% Murder: killing with explicit lack of consent is unethical.

fof(killing_with_explicit_non_consent_is_unethical, conjecture,
    (
     (
      (~ consents(victim, murderer, kill)) &
      do(murderer, victim, kill) &
      murderer != victim
     ) =>
     (~ ethical(murderer, victim, kill))
    )
).

% Negated test case: killing_with_explicit_non_consent_is_not_ethical
%
% Murder: killing with explicit lack of consent should not be proven to be ethical.

fof(killing_with_explicit_non_consent_is_unethical, conjecture,
    (
     (
      (~ consents(victim, murderer, kill)) &
      do(murderer, victim, kill) &
      murderer != victim
     ) =>
     ethical(murderer, victim, kill)
    )
).

% Test case: killing_with_explicit_consent_is_ethical
%
% Euthanasia: killing with explicit consent is ethical.

fof(killing_with_explicit_consent_is_ethical, conjecture,
    (
     (ask_for_consent(doctor, patient, kill) &
      consents(patient, doctor, kill) &
      do(doctor, patient, kill) &
      docker != patient
     ) =>
     ethical(doctor, patient, kill)
    )
).

% Negated test case: killing_with_explicit_consent_is_not_unethical
%
% Euthanasia: killing with explicit consent should not be proven to be unethical.

fof(killing_with_explicit_consent_is_not_unethical, conjecture,
    (
     (ask_for_consent(doctor, patient, kill) &
      consents(patient, doctor, kill) &
      do(doctor, patient, kill) &
      doctor != patient
     ) =>
     (~ ethical(doctor, patient, kill))
    )
).

% Test case: suicide_without_consent_is_ethical
%
% Suicide: suicide without asking self for consent is ethical.

fof(suicide_without_consent_is_ethical, conjecture,
    (
     (
      (~ ask_for_consent(person, person, kill)) &
      do(person, person, kill)
     ) =>
     ethical(person, person, kill)
    )
).

% Negated test case: suicide_without_consent_is_not_unethical
%
% Suicide: suicide without asking self for consent should not be prove to be unethical.

fof(suicide_without_consent_is_not_unethical, conjecture,
    (
     (
      (~ ask_for_consent(person, person, kill)) &
      do(person, person, kill)
     ) =>
     (~ ethical(person, person, kill))
    )
).

% Test case: suicide_with_explicit_non_consent_is_ethical
%
% Suicide: suicide with explicit lack of self-consent is ethical.

fof(suicide_with_explicit_non_consent_is_ethical, conjecture,
    (
     (
      (~ consents(person, person, kill)) &
      do(person, person, kill)
     ) =>
     ethical(person, person, kill)
    )
).

% Negated test case: suicide_with_explicit_non_consent_is_not_unethical
%
% Suicide: killing with explicit lack of self-consent should not be proven to be unethical.

fof(suicide_with_explicit_non_consent_is_not_unethical, conjecture,
    (
     (
      (~ consents(person, person, kill)) &
      do(person, person, kill)
     ) =>
     (~ ethical(person, person, kill))
    )
).

% Test case: suicide_with_explicit_consent_is_ethical
%
% Suicide: suicide with own explicit consent is ethical.

fof(suicide_with_explicit_consent_is_ethical, conjecture,
    (
     (ask_for_consent(person, person, kill) &
      consents(person, person, kill) &
      do(person, person, kill)
     ) =>
     ethical(person, person, kill)
    )
).

% Negated test case: suicide_with_explicit_consent_is_not_unethical
%
% Suicide: suicide with own explicit consent should not be proven to be unethical.

fof(suicide_with_explicit_consent_is_not_unethical, conjecture,
    (
     (ask_for_consent(person, person, kill) &
      consents(person, person, kill) &
      do(person, person, kill)
     ) =>
     (~ ethical(person, person, kill))
    )
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Assault versus consensual harm. (i.e. medicine, kink.)
%%%

% Test case: harm_without_consent_is_unethical
%
% Assault: harm without consent is unethical.

fof(harm_without_consent_is_unethical, conjecture,
    (
     (
      (~ ask_for_consent(assailant, victim, harm)) &
      do(assailant, victim, harm) &
      assailant != victim
     ) =>
     (~ ethical(assailant, victim, harm))
    )
).

% Negated test case: harm_without_consent_is_not_ethical
%
% Assault: harm without consent should not be proven to be ethical.

fof(harm_without_consent_is_not_ethical, conjecture,
    (
     (
      (~ ask_for_consent(assailant, victim, harm)) &
      do(assailant, victim, harm) &
      assailant != victim
     ) =>
     ethical(assailant, victim, harm)
    )
).

% Test case: harm_with_explicit_non_consent_is_unethical
%
% Assault: harm with explicit non-consent is unethical.

fof(harm_with_explicit_non_consent_is_unethical, conjecture,
    (
     (
      (~ consents(victim, assailant, harm)) &
      do(assailant, victim, harm) &
      assailant != victim
     ) =>
     (~ ethical(assailant, victim, harm))
    )
).

% Negated test case: harm_with_explicit_non_consent_is_not_ethical
%
% Assault: harm with explicit non-consent should not be proven to be ethical.

fof(harm_with_explicit_non_consent_is_not_ethical, conjecture,
    (
     (
      (~ consents(victim, assailant, harm)) &
      do(assailant, victim, harm) &
      assailant != victim
     ) =>
     ethical(assailant, victim, harm)
    )
).

% Test case: harm_with_explicit_consent_is_ethical
%
% Consensual harm: harm with explicit consent is ethical. (i.e. medicine, kink.)

fof(harm_with_explicit_consent_is_ethical, conjecture,
    (
     (
      ask_for_consent(assailant, recipient, harm) &
      consents(recipient, assailant, harm) &
      do(assailant, recipient, harm) &
      assailant != recipient
     ) =>
     ethical(assailant, recipient, harm)
    )
).

% Negated test case: harm_with_explicit_consent_is_not_unethical
%
% Consensual harm: harm with explicit consent should not be proven to be unethical.

fof(harm_with_explicit_consent_is_not_unethical, conjecture,
     (
      (
       ask_for_consent(assailant, recipient, harm) &
       consents(recipient, assailant, harm) &
       do(assailant, recipient, harm) &
       assailant != recipient
      ) =>
      (~ ethical(assailant, recipient, harm))
     )
).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Self-directed interactions
%
% Anything you do to yourself is, by default, ethical.
%
% (These may seem nonsensical, but are added for consistency purposes.)
%%%

% Test case: asking_and_getting_own_consent_is_ethical
%
% Asking yourself for consent and getting it is ethical.

fof(asking_and_getting_own_consent_is_ethical, conjecture,
    (
     (
      ask_for_consent(alex, alex, action) &
      consents(alex, alex, action)
     ) =>
     ethical(alex, alex, action)
    )
).

% Negated test case: asking_and_getting_own_consent_is_not_unethical
%
% Asking yourself for consent and getting it should not be proven to be unethical.

fof(asking_and_getting_own_consent_is_not_unethical, conjecture,
    (
     (
      ask_for_consent(alex, alex, action) &
      consents(alex, alex, action)
     ) =>
     (~ ethical(alex, alex, action))
    )
).

% Test case: asking_and_not_getting_own_consent_is_ethical
%
% Asking yourself for consent and not getting it is ethical.

fof(asking_and_not_getting_own_consent_is_ethical, conjecture,
    (
     (
      ask_for_consent(alex, alex, action) &
      (~ consents(alex, alex, action)) &
      (~ do(alex, alex, action))
     ) =>
     ethical(alex, alex, action)
    )
).

% Negated test case: asking_and_not_getting_own_consent_is_not_unethical
%
% Asking yourself for consent and not getting it should not be proven unethical.

fof(asking_and_not_getting_own_consent_is_not_unethical, conjecture,
    (
     (
      ask_for_consent(alex, alex, action) &
      (~ consents(alex, alex, action)) &
      (~ do(alex, alex, action))
     ) =>
     (~ ethical(alex, alex, action))
    )
).

% Test case: ignoring_own_consent_negative_responses_is_ethical
%
% Ignoring your own consent-negative responses is ethical.

fof(ignoring_own_consent_negative_responses_is_ethical, conjecture,
    (
     (
      ask_for_consent(alex, alex, action) &
      (~ consents(alex, alex, action)) &
      do(alex, alex, action)
     ) =>
     ethical(alex, alex, action)
    )
).

% Negated test case: ignoring_own_consent_negative_responses_is_not_unethical
%
% Ignoring consent-negative responses should not be proven to be ethical.

fof(ignoring_own_consent_negative_responses_is_not_unethical, conjecture,
    (
     (
      ask_for_consent(alex, alex, action) &
      (~ consents(alex, alex, action)) &
      do(alex, alex, action)
     ) =>
     (~ ethical(alex, alex, action))
    )
).

%
% Test runner: end tests.
%
